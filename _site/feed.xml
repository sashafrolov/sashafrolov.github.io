<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sasha Frolov&apos;s Website</title>
    <description>bem bom bom
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 24 Jun 2025 19:19:48 -0400</pubDate>
    <lastBuildDate>Tue, 24 Jun 2025 19:19:48 -0400</lastBuildDate>
    <generator>Jekyll v4.3.4</generator>
    
      <item>
        <title>Some thoughts on industry vs. academia 1 year into grad school</title>
        <description>&lt;p&gt;As of the time of writing this blog post, it has been about a year since I left my job at Meta to go to grad school. People somewhat frequently ask me about the experience of moving from big tech to academia. I have seen a couple of blog posts comparing industry and academia which I thought were pretty inane and said generic stuff like “industry is more applied while academia is more theoretical”. I would like to offer a more concrete perspective based on my experiences this year.&lt;/p&gt;

&lt;h1 id=&quot;skills-from-industry-that-are-useful-in-grad-school&quot;&gt;Skills from industry that are useful in grad school&lt;/h1&gt;

&lt;p&gt;It has been interesting to see what skills transfer from Meta to grad school. One skill that has repeatedly proved valuable is &lt;em&gt;code review&lt;/em&gt;. At Meta, all code had to be reviewed and approved by a teammate before it could be committed to the codebase, and I got decently good at reading new code and offering suggestions. Some of my collaborators this year were new to programming zk-SNARKs, and being able to give feedback on their code helped them ramp up quickly.&lt;/p&gt;

&lt;p&gt;Relatedly, &lt;em&gt;reading code&lt;/em&gt;/&lt;em&gt;using code search&lt;/em&gt; has been a really valuable skill. A common method for programming at Meta was to use the code search tool to see how other people did something, and then reuse their solution for yourself. The current code search feature on GitHub does most of what Meta’s code search did. Furthermore, being able to quickly read code and use code search/click to definition to find where code implements some functionality also ended up being really helpful. As an example, these skills were useful for understanding various buggy/unexpected behaviors in some SNARK libraries I used. I didn’t appreciate that these were somewhat Meta specific skills until leaving.&lt;/p&gt;

&lt;h1 id=&quot;stuff-meta-does-better-than-academia&quot;&gt;Stuff Meta does better than academia&lt;/h1&gt;

&lt;p&gt;Next, I would like to talk about things that Meta did better than academia (and in some cases, things that I think Ph.D. advisors could really learn from). As I said before, I think code review is really valuable for getting new students/engineers to improve at any type of programming, but especially in a weird programming model like zk-SNARKs/programmable cryptography. I felt like I really helped my collaborators with certain instances of code review, and that I saw some codebases for papers that could have done with some code review (soundness errors, incomplete code, etc.). At a higher level, new software engineers on my team/at Meta got assigned mentors. Mentoring was pretty hands-on, at the level of code review and project planning. I thought that this model was a lot better for helping somebody who has only done undergrad coursework transition to working on long-term ambiguous projects than the more hands-off model of a lot of advisors. I am not sure if this is universal, but it also seemed like this advising model was also better at getting people to think critically and suggest improvements for code/frameworks that they work with.&lt;/p&gt;

&lt;p&gt;Meta was also much better at managing distractions/stress than academia. One of my biggest complaints about grad school from the first 2 semesters was how often classes/bureaucracy/seminars/being poor/something else kept me distracted from doing good work. There were multiple times where I had a good idea for something research-related and then just couldn’t act on it for another 2 days because of a combination of things from the previous list. This is compared to Meta, where I could basically code for all day minus 1 or 2 hours, and was doing good quality work much more often. I don’t know what the solution is, but I think people running graduate programs could really benefit from decreasing the amount of distractions. This includes: not sending so many emails per day, decreasing the required courseload, making funding stuff simpler, having fewer but better seminars, etc, etc.&lt;/p&gt;

&lt;p&gt;I also have found that I am just more stressed in grad school than I was in industry, which also makes it harder to do good work. This seems like a hard thing to improve, but the two worst parts for me were paper deadlines and everybody having a website where you can go see how much smarter they are than you.&lt;/p&gt;

&lt;h1 id=&quot;stuff-academia-does-better-than-industry&quot;&gt;Stuff academia does better than industry&lt;/h1&gt;

&lt;p&gt;Lastly, I would like to talk about what grad school does better than Meta. This will probably be the most generic paragraph of the post. I like the extra freedom in grad school, and the ability (most of the time) to screw off and just read something or otherwise pursue something interesting. I also felt way more freedom to have ideas for projects. Something that continuously bothered me at Meta was how little control I had over the project ideas for my team, and there is a lot more freedom to contribute in this regard. The feeling that the work I am doing is a more fundamental contribution to science, as opposed to random stuff Meta needs done is also nice. I realize this paragraph was weirdly short, but it is more about not having anything interesting to say than being miserable at the moment.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I hope this is interesting to somebody. If you have any (non-obvious) thoughts about industry vs. academia, please contact me by email or Bluesky or something. I would be curious to hear!&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Jun 2025 06:28:15 -0400</pubDate>
        <link>http://localhost:4000/blog/2025/06/industry-vs-academia</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2025/06/industry-vs-academia</guid>
        
        
        <category>school</category>
        
      </item>
    
      <item>
        <title>Trade-offs and Pitfalls in zkVM design (or, some ways to make your zkVM code 3-10 times slower)</title>
        <description>&lt;p&gt;In the past few months, I have done some work writing optimized code for the Succinct SP1 zkVM. Tuning zkVM code is a remarkably fruitful area for finding ways to speed or slow down your code by large factors. Here, I wil list a few issues I investigated, all of which I think represent interesting performance issues. From looking at the Jolt/RISC-0 codebases, it seems like other generic, RISC-V based zkVMs also deal with these issues. Anyway, here is a listicle:&lt;/p&gt;

&lt;h2 id=&quot;1-input-serializationdeserialization&quot;&gt;1. Input serialization/deserialization&lt;/h2&gt;
&lt;p&gt;A core part of a zkVM (and zk-SNARKs as a whole) is being able to provide public/private inputs to the circuit. zkVMs typically represent this I/O within the abstractions used by the zkVM. This means that there are “syscalls” for reading/writing data from outside of the zkVM into the zkVM.&lt;/p&gt;

&lt;p&gt;All zkVMs that let you write Rust (RISC-0, SP1, Jolt) that I checked let you pass arbitrary (serializable) structs from regular Rust code running on a CPU into the zkVM. To achieve this, they serialize the struct using a library like serde, pass the serialized bytes into the zkVM, and then have the struct be deserialized inside of the zkVM. There is a problem though, running deserialization inside the zkVM can be pretty expensive.&lt;/p&gt;

&lt;p&gt;For the use case I was working on, we were passing a few hundred kilobytes of data into SP1, and deserializing the data took twice as long as the actual function we wanted to compute! The SP1 developers realized this was a potential performance bottleneck. If you are just passing bytes into the zkVM, you can pass those in directly without going through a (de)serialization step. By using this specialized function, my SP1 code became about 3x faster! (you call a function called read_vec rather than a generic read&lt;T&gt; function)&lt;/T&gt;&lt;/p&gt;

&lt;p&gt;There is not much of a trade-off here, but a combination of 2 issues: 1 is that this pitfall was not well documented and I had to read the source code myself. The second issue is that Rust doesn’t let you have specializations of generics the way that C++ does. With specialized generics, the SP1 source library could tell that you’re passing in raw bytes, and know that it shouldn’t do an unnecessary (de)serialization step. This type of specialization &lt;a href=&quot;https://rust-lang.github.io/rfcs/1210-impl-specialization.html&quot;&gt;exists&lt;/a&gt; in Rust nightly but not in stable Rust. I wrote a pull request to update the SP1 documentation with this information.&lt;/p&gt;

&lt;h2 id=&quot;2-floating-point-operations&quot;&gt;2. Floating-Point Operations&lt;/h2&gt;
&lt;p&gt;At one point, I tried to write some SP1 code which heavily used floating point operations because we wanted to try a floating point-heavy algorithm. My zkVM code went from taking a few minutes to not being able to terminate. It was taking ~40 times longer (estimated). The reason for this is pretty simple. No zkVM that I could find implements floating point instructions natively, since most RISC-V zkVMs implement RV32I, which does not have special instructions for floating point numbers.&lt;/p&gt;

&lt;p&gt;Thus, when compiling my code that used floating point operations into code for RISC-V, the compiler had to emulate floating point numbers using integer instructions. This meant that each floating point operation was transformed into ~100 integer instructions to handle the complexities of floating point. This resulted in a much, much slower prover. For our specific use case, we were able to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Fixed-point_arithmetic&quot;&gt;fixed-point numbers&lt;/a&gt;. Making this replacement resulted in a ~7x speedup just by replacing floating-point numbers with 64-bit fixed point ones (and a small precision loss).&lt;/p&gt;

&lt;p&gt;The trade-off here is pretty obvious: circuits for floating point operations in zk are expensive, even with SOTA hand-optimized circuits (&lt;a href=&quot;https://arxiv.org/pdf/2404.14983&quot;&gt;see here&lt;/a&gt;). It seems like most applications of zkVM’s have no need for floating point operations, so the smaller circuit sizes and less complexity are worth more than the feature. However, if a zkVM wants to be fully generic, or wants to be useful for floating point-heavy workloads like computer graphics or machine learning, then it should be extended with custom circuits for floating point operations. Until then, this is a performance pitfall that may be surprising to users who haven’t thought about instruction sets.&lt;/p&gt;

&lt;h2 id=&quot;3-generating-commitments-to-outputs&quot;&gt;3. Generating commitments to outputs&lt;/h2&gt;
&lt;p&gt;At another point, we experimented with returning multiple kilobytes of output from our code. This also seemed to gum up our prover logic and use a ton of zkVM cycles.&lt;/p&gt;

&lt;p&gt;After looking into the code, we learned that SP1 computes the SHA-256 hash of all the data it outputs. This is needed because “wrapper” circuits for recursively verifying the zkVM’s proofs are hardcoded to publicly output 32 bytes, so all output from the zkVM needs to be hashed into one output hash. One use case that SP1 is specializing for is creating proofs that can be verified in Ethereum contracts, where SHA256 is particularly efficient (from precompiles), so they use SHA-256 for hashing the output.&lt;/p&gt;

&lt;p&gt;The tradeoff here is that proofs can be efficiently verified on-chain and that the “wrapper” circuits are much simpler, while outputting data from the circuit has a high in-circuit cost, and this cost is paid by all use cases that are unrelated to Ethereum.&lt;/p&gt;

&lt;h2 id=&quot;4-access-to-randomness&quot;&gt;4. Access to randomness&lt;/h2&gt;
&lt;p&gt;Commit-and-prove techniques are a really powerful tool in zero-knowledge proofs. They give circuits in zero-knowledge proofs the ability to access randomness in their computations. The high level idea is that pseudorandom values are generated based on a commitment to the prover’s private inputs to the circuit. Lots of super-efficient proof techniques are possible with access to randomness from commit-and-prove, like &lt;a href=&quot;https://eprint.iacr.org/2023/1115&quot;&gt;really fast RAM constructions&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Freivalds%27_algorithm&quot;&gt;verifying matrix multiplications&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, the SP1 zkVM does not let you access pseudorandom values inside of the zkVM, even though their memory-checking uses randomness. They actually override the Rust default RNG to make it &lt;a href=&quot;https://github.com/succinctlabs/sp1/blob/f2a6187a7193389a2a7119f27f963b6b438a626e/crates/zkvm/entrypoint/src/syscalls/sys.rs#L29&quot;&gt;deterministic&lt;/a&gt;. It seems like Jolt doesn’t offer an in-circuit RNG while RISC-0 offers one for precompiles.&lt;/p&gt;

&lt;p&gt;I think there is an opportunity to really improve the things you can do in zkVMs by overriding the default Rust RNG with a commit-and-prove based RNG, so you can do various fast randomized tricks that wouldn’t otherwise be possible. On one hand, this is a bit of a power user feature, so it’s probably not worth prioritizing too much. You might make an argument like Vitaliks &lt;a href=&quot;https://vitalik.eth.limo/general/2024/09/02/gluecp.html&quot;&gt;“glue and coprocessor model”&lt;/a&gt; and say that it’s fine that zkVM code is inefficient, since this will just implement “glue code”. However, this commit-and-prove randomness is not even accessible in precompiles for the SP1 zkVM, so if I wanted to do “power-user” optimizations based on random sampling, I would not be able to do them in any way while working with SP1.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;To conclude, I think issues 2 and 3 represent genuinely interesting tradeoffs in designing a zkVM, while 1 is more of an annoying pitfall and 4 is a potential future feature. One way to deal with the tradeoffs associated with these issues is to make a super-configurable zkVM where you can decide which instruction set extensions to use, decide whether you want the proofs to be optimized for on-chain verification, and make decisions about any other tradeoffs that may come up.&lt;/p&gt;

&lt;p&gt;On the other hand, I remember my last job had a team of people whose job was basically deciding which clang (C++ compiler) flags the company’s code would use. I think most large companies that heavily use C++ have such a team. This is a remarkably deep and complicated area, and a lot of very senior engineers worked there. Some of my most hair-pulling moments involved pushing code that seemed to work only for me to cause bugs in production because one obscure version of the compiler flags didn’t play nice with what I wrote. Traditional compilers have gone in the direction of maximum configurability to deal with all of the potential performance quirks of using them, but this has resulted in a ton of complexity in configuring and using compilers optimally. I hope zkVM’s can come up with more user friendly ways of dealing with configuration involving performance tradeoffs.&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Mar 2025 06:30:15 -0400</pubDate>
        <link>http://localhost:4000/blog/2025/03/zkvm-design-tradeoffs</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2025/03/zkvm-design-tradeoffs</guid>
        
        
        <category>zkproofs</category>
        
      </item>
    
      <item>
        <title>2 New Applications of zk-SNARKs (Free Ideas!)</title>
        <description>&lt;p&gt;This blog post is inspired by &lt;a href=&quot;https://soatok.blog/2024/12/09/ideas-and-execution/&quot;&gt;a similar blog post by Soatok&lt;/a&gt;. This semester at grad school, I had a couple of ideas for real-world applications where zk-SNARKs would be useful, but I didn’t have the time to write code or implement them. I particularly think that idea 1 would be a fun startup/at least an Ethereum hackathon idea.&lt;/p&gt;

&lt;h2 id=&quot;idea-1-zk-quantitative-strategies-for-stock-trading&quot;&gt;Idea 1: zk Quantitative Strategies for Stock Trading&lt;/h2&gt;
&lt;p&gt;This idea is inspired by an issue of Matt Levine’s Money Stuff. It is &lt;a href=&quot;https://newsletterhunt.com/emails/56933&quot;&gt;the story about Jane Street vs Millennium here&lt;/a&gt;. To summarize the story, there is an ongoing lawsuit between two large quantitative hedge funds. Jane Street is suing Millennium because they believe that some people Millennium poached from Jane Street stole some sort of simple but counterintuitive and lucrative quantitative trading strategy and started using it at Millennium. The evidence has to do with patterns in the market changing and Jane Street’s profits being affected. Quantitative strategies are simple mechanical rules for how to trade stocks. They can range anywhere from simple rules like “buy $NVDA when it has gone down 15% in the last day” to complicated ML models that use a lot of data. They can be worth billions of dollars.&lt;/p&gt;

&lt;p&gt;A recent direction of work in zero-knowledge proofs is “exploit sharing”, where you provide a proof that you know an input to a program that results in an exploit (such as &lt;a href=&quot;https://eprint.iacr.org/2022/1223&quot;&gt;this paper&lt;/a&gt;). An example scenario where this would be useful is where you are trying to responsibly disclose the fact that you have found an exploit in a major piece of software. You could post a zk-SNARK proving that running the program on a secret input produces exploit-like behavior. Alternatively, you could use this to sell zero-day bugs in a way that requires less trust.&lt;/p&gt;

&lt;p&gt;I think there is an interesting combination of these two ideas in “Zero-Knowledge Quantitative Strategy Sharing”. Here, a person trying to sell a quantitative strategy (like an ex-Jane Street person), would provide a zero-knowledge proof that their strategy performs well on past data. Furthermore, they could provide a commitment to their strategy, and then provide a zero-knowledge proof a month later that the strategy performed well on the market in that time. This could decrease the level of trust required in these kinds of financial transactions.&lt;/p&gt;

&lt;p&gt;You can go further with this idea. You could have an anonymous, trustless hedge fund (maybe running on-chain or in a TEE), where anonymous quants prove that they know effective quantitative strategies before they sell them to you. Even further, the hedge fund could not even be required to know the strategies it is trading on. The strategy owner could just send proofs that the strategy they committed to produced a certain sequence of trades, on which the hedge fund will then trade. In this system, anonymous analysts could get access to capital, just by proving that they know effective strategies.&lt;/p&gt;

&lt;p&gt;This would probably improve market liquidity/efficiency by having fewer hedge funds have a monopoly over certain trades/strategies.&lt;/p&gt;

&lt;p&gt;As pointed out by Natanael on Bluesky, this “anonymous hedge fund” idea has the issue that the owners of the strategies could then trade against the fund once they reveal the strategies. I didn’t think about this! Likewise, you would probably have to charge some fee for committing to a strategy so that users would not be able to submit a bunch of random strategies and hope that some of them are successful.&lt;/p&gt;

&lt;h2 id=&quot;idea-2-hsts-header-database-for-tor-with-zk-snarks&quot;&gt;Idea 2: HSTS Header Database for Tor with zk-SNARKs&lt;/h2&gt;
&lt;p&gt;To learn more about this idea, please look at &lt;a href=&quot;https://petsymposium.org/popets/2024/popets-2024-0020.pdf&quot;&gt;this paper from PETS 2024&lt;/a&gt; called “CoStricTor: Collaborative HTTP Strict Transport Security in Tor Browser”.&lt;/p&gt;

&lt;p&gt;To briefly explain the aforementioned paper, HSTS is a feature of HTTPS that lets a website say “this website will use HTTPS from now on” (rather than HTTP), which prevents downgrade attacks to HTTP. It is a security improvement most of the time. However, HSTS headers are stored in a client’s state (they are often called “supercookies” because they are part of a client’s state at a different level), and this means that a malicious actor can fingerprint clients by sending different HSTS headers for different websites. You can read more about this idea &lt;a href=&quot;https://arstechnica.com/information-technology/2015/01/browsing-in-privacy-mode-super-cookies-can-track-you-anyway/&quot;&gt;here&lt;/a&gt;. Because of this privacy issue, the Tor browser has yet to implement HSTS, even though it would be a security upgrade in many ways.&lt;/p&gt;

&lt;p&gt;This attack is not possible if clients can compare the HSTS headers they receive from different websites to make sure that a website owner isn’t using HSTS to fingerprint users. The paper I linked builds a system that runs such a database as part of the Tor network. They focus on building this distributed database in a privacy-preserving way. This includes using differential privacy and other techniques. Their system scales fairly well.&lt;/p&gt;

&lt;p&gt;There is one major issue with this system, which is that malicious users can add garbage to the distributed HSTS header database. This system does not validate the reported headers at all (and the differentially private nature of the database obscures exactly how/what bad data was submitted). There is a potential application of zk-SNARKs here! At a high level, when a user adds an HSTS header to the database, they provide a zero-knowledge proof showing that they actually received the HSTS header they are reporting as part of an HTTP connection with the website. This allows the system to authenticate the reports it receives.&lt;/p&gt;

&lt;p&gt;On its face, this protocol doesn’t work. The issue is that you normally can’t use zk-SNARKs directly to build a TLS oracle/zkTLS setup. You normally need trusted hardware or MPC to check that a piece of data actually came from a TLS connection with some party. The Tor setting offers an easy fix. Your Tor traffic necessarily goes through an exit node before going to its destination. The exit node your Tor traffic goes through sees your TLS traffic with the website you are communicating with. The user can attach a zero-knowledge proof that the TLS traffic that the exit node sees decrypts to a stream containing a given HSTS header. This gives you a TLS oracle!&lt;/p&gt;

&lt;p&gt;Then, the exit node could verify the zero-knowledge proof, and submit it to the shared database. You now have the CoStricTor system with data validation (after working out some details). There is still some trust required here, though it is an improvement over the original CoStricTor system. You must trust that your exit node will actually verify the proofs and send them to the HSTS header database. Secondly, if a client and exit node collude, they can still add garbage HSTS headers to the database. There are workarounds to both of these issues, such as having a subset of trusted entrance nodes that are guaranteed to generate random routing paths, so the likelihood of hitting a colluding node is lower. This is a decent bit of engineering, but I think it would be cool.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope you found this interesting. I am giving these ideas away for free, but if you do use the idea, please mention me somewhere/tell me about it. Thanks!&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://bsky.app/profile/natanael.bsky.social&quot;&gt;Natanael&lt;/a&gt; on Bluesky for pointing out some details with both ideas that I had not considered! (the ability for a strategy owner to trade against the fund in idea 1, and the issue of collusion in idea 2).&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Dec 2024 07:30:15 -0500</pubDate>
        <link>http://localhost:4000/blog/2024/12/new-snark-applications</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2024/12/new-snark-applications</guid>
        
        
        <category>zkproofs</category>
        
      </item>
    
      <item>
        <title>My Shenandoah National Park Itinerary</title>
        <description>&lt;p&gt;Over the summer (in June) I visited Shenandoah National Park with my family. We were staying at a hotel in Charlottesville, VA. I think I did a good job with planning our itinerary, and I thought the other itineraries I found online were not very good, so I am posting mine on this blog.&lt;/p&gt;

&lt;p&gt;Here is a map of the itinerary:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../images/image.png&quot; alt=&quot;Image of loop around Shenandoah&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.google.com/maps/dir/Fairfield+Inn+%26+Suites+Charlottesville+Downtown%2FUniversity+Area/Shenandoah+Nat&apos;l+Park+Sign/Stony+Man+Trailhead,+Appalachian+National+Scenic+Trail,+Luray,+VA/Pollock+Dining+Room+at+Skyland,+Skyland+Upper+Loop,+Luray,+VA/Hawksbill+Loop+Trailhead+Parking,+Luray,+VA/Blue+Ridge+Tunnel+Trail,+West+Trailhead/Fairfield+Inn+%26+Suites+Charlottesville+Downtown%2FUniversity+Area,+Cherry+Avenue,+Charlottesville,+VA/@38.3049581,-78.7507846,10.22z/data=!4m49!4m48!1m5!1m1!1s0x89b3863d04337505:0xb28f5333bd9c2979!2m2!1d-78.4892926!2d38.0263713!1m5!1m1!1s0x89b466becf263bdd:0xd522a8da2d44ede1!2m2!1d-78.5485021!2d38.3596086!1m5!1m1!1s0x89b44905bfdb6a87:0xe4f5bfd029ac5988!2m2!1d-78.3755453!2d38.5931805!1m5!1m1!1s0x89b44de27631937f:0x20c58fe4acc7f01f!2m2!1d-78.3803642!2d38.593022!1m10!1m1!1s0x89b445e0593a70cf:0xa0d9709afecc46f!2m2!1d-78.3868242!2d38.5561482!3m4!1m2!1d-78.721644!2d38.2341077!3s0x89b48659a81520b5:0xed31bdaf6292a0b9!1m5!1m1!1s0x89b36329e03f20f3:0xd053e82a614ca0bb!2m2!1d-78.8575955!2d38.0435911!1m5!1m1!1s0x89b3863d04337505:0xb28f5333bd9c2979!2m2!1d-78.4892926!2d38.0263713!3e0!5m1!1e2?entry=ttu&amp;amp;g_ep=EgoyMDI0MTIxMS4wIKXMDSoASAFQAw%3D%3D&quot;&gt;Here is the Google Maps link.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google Maps says it is 3 hours and 44 minutes, but don’t be scared, you can likely go a bit faster (wink, wink), and most of the driving time is on Skyline Drive, the road that runs the length of Shenandoah National Park. The road itself is a famous attraction at the park, so the driving is a feature, not a bug.&lt;/p&gt;

&lt;p&gt;I planned my itinerary around my family, who are in decent shape. They like hiking, but need some motivation like a view or something cool to look at to make it worthwhile. They also like somewhat frequent breaks from driving. In addition to the big stops, we briefly stopped at a few random overlooks along Skyline Drive.&lt;/p&gt;

&lt;p&gt;Here’s a rundown of the itinerary:&lt;/p&gt;

&lt;h2 id=&quot;1-enter-through-swift-run-gap-station&quot;&gt;1. Enter through Swift Run Gap Station&lt;/h2&gt;

&lt;p&gt;From Charlottesville, this is the closest park entrance. If you like taking photos with National Park signs, this is the place.&lt;/p&gt;

&lt;h2 id=&quot;2-hike-stony-man-mountain&quot;&gt;2. Hike Stony Man Mountain&lt;/h2&gt;

&lt;p&gt;This is &lt;a href=&quot;https://www.alltrails.com/trail/us/virginia/stony-man-via-appalachian-trail&quot;&gt;1.5 miles of distance/320 feet of elevation&lt;/a&gt;. This mountain has a cool view, and the hike from the parking lot overlaps with the Appalachian Trail, so you get to see Appalachian Trail through-hikers here, another cool sight at the park.&lt;/p&gt;

&lt;h2 id=&quot;3-get-blackberry-pie-at-pollock-dining-room&quot;&gt;3. Get Blackberry Pie at Pollock Dining Room&lt;/h2&gt;

&lt;p&gt;I chose Stony Man Mountain because you can walk to the Pollock Dining Room and get blackberry ice cream after hiking. The blackberry ice cream pie is really good and absolutely worth getting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../images/blackberrypie.png&quot; alt=&quot;Blackberry Pie at Pollock Dining Room in Shenandoah NP&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-climb-hawksbill-mountain&quot;&gt;4. Climb Hawksbill Mountain&lt;/h2&gt;

&lt;p&gt;This hike is &lt;a href=&quot;https://www.alltrails.com/trail/us/virginia/hawksbill-summit&quot;&gt;1.6 miles and 660 feet of elevation&lt;/a&gt;. If this is too much, there is a nearby mountain called Bearfence Mountain that is a bit easier. This mountain also has a really great view. Shenandoah is one of the only parks I have been to where the pictures you take at summits look cooler than they felt at the moment (it’s generally the other way around).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../images/hawksbillsummit.png&quot; alt=&quot;View from the top of Hawksbill Mountain&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-picnic-lunch-at-lewis-mountain-picnic-area&quot;&gt;5. Picnic Lunch at Lewis Mountain Picnic Area&lt;/h2&gt;

&lt;p&gt;We brought sandwiches and ate them while driving down Skyline drive. We chose the Lewis Mountain Picnic area which was pretty nice, though all the campsites looked nice for lunch and I don’t think this is an important choice. They had a water fountain carved into a rock! (unfortunately not working)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../images/rockwaterfountain.png&quot; alt=&quot;Water Fountain Carved out of a Rock&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;6-crozet-blue-ridge-tunnel&quot;&gt;6. Crozet Blue Ridge Tunnel&lt;/h2&gt;
&lt;p&gt;The Blue Ridge Tunnel is my personal highlight of the visit. I am very surprised it exists and I think it should be more well known. It is an approximately 1 mile long railroad tunnel built in the 1850s. It was abandoned at some point, and is now a multiuse trail for biking/walking. The entrance is not inside Shenandoah National Park, but it does run under the park. It is a 2-mile walk one way. The best way to do it is to have one person drop you off at the West End Parking lot, have them drive over to the East Parking lot, and meet up somewhere in the middle of the tunnel so nobody has to go back and forth through the tunnel. It takes about 25 minutes to walk through the tunnel, and it is pitch black inside. You need flashlights (fully charged phones worked for us). It is very creepy and damp and drippy, though the temperature is nice when it is hot. I felt pretty weird after doing it, but it is one of the most unique hikes I have ever done. Here is a photo of fog abruptly starting at the entrance to the tunnel:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../images/foghanging.png&quot; alt=&quot;Fog Hanging in front of the tunnel entrance&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;final-itinerary-discussion&quot;&gt;Final Itinerary Discussion&lt;/h2&gt;

&lt;p&gt;To conclude, I am pretty proud of this itinerary. There is a variety of things (cool views, good hiking, good food, weird creepy tunnel), and you get to see a large sample of what there is to see at Shenandoah in one day. The other itineraries I saw either suggested spending the whole day on the Old Rag hike, or suggested driving the entire length of the park with very few stops. I hope this itinerary is interesting to somebody else.&lt;/p&gt;

&lt;p&gt;Footnote: One pet peeve that I want to mention is that the US National Park Service has a section on the website for each park to help you select hikes/walks. This seems like a useful tool, but the hike selection is almost always bad. I assume that it is a technique to guide tourists onto less popular trails to “load balance” the park. I don’t think you should use it!&lt;/p&gt;

&lt;!-- 
## Advice on planning trips to US National Parks

This is the 4th or 5th trip to a US National Park that I have been in charge of planing. If you use the right resources, you can put together a pretty good itinerary in a couple hours. A lot of the touristy parks in the US are driving oriented, and have very simple road structures (a loop, 2 loops, a straight line, etc.) that pass through all of the main attractions at the park. It shouldn&apos;t be that hard to choose a path through the road network that hits all the famous stuff at the park (generally marked on a map). Next, AllTrails is good for finding good hikes/walks, and sample itineraries on the internet might teach you about some other attractions. Most parks have a canonical list of famous stuff to see --&gt;

&lt;!-- You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

To add new posts, simply add a file in the `_posts` directory that follows the convention `YYYY-MM-DD-name-of-post.ext` and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.

Jekyll also offers powerful support for code snippets:


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Tom&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &apos;Hi, Tom&apos; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


Check out the [Jekyll docs][jekyll] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll’s dedicated Help repository][jekyll-help].

[jekyll]:      http://jekyllrb.com
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-help]: https://github.com/jekyll/jekyll-help --&gt;
</description>
        <pubDate>Tue, 17 Dec 2024 12:02:27 -0500</pubDate>
        <link>http://localhost:4000/blog/2024/12/shenandoah-itinerary</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2024/12/shenandoah-itinerary</guid>
        
        
        <category>misc</category>
        
      </item>
    
  </channel>
</rss>
